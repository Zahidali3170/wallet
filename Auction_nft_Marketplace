// SPDX-License-Identifier: MIT OR Apache-2.0
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract RewardToken is ERC20 {
    constructor() ERC20("MyToken", "MTK") {}
    address public add ;

    function mint(uint256 _amount) public {
        _mint(msg.sender, _amount);
        add=msg.sender;
    }
}
contract NFT is ERC721URIStorage   {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;
    address contractAddress;
    address  ecr20 ;
    address  reward;
    uint256 public rewardToken=10;

    constructor(address marketplaceAddress , address _ercreward) ERC721("Nader's Digital Marketplace", "NDM") {
        contractAddress = marketplaceAddress;
        ecr20=msg.sender;
        reward=_ercreward;

    }

    function createToken(string memory tokenURI) public returns (uint) {
        _tokenIds.increment();
        uint256 newItemId = _tokenIds.current();

        _mint(msg.sender, newItemId);
        _setTokenURI(newItemId, tokenURI);
        IERC20(reward).transferFrom(ecr20,msg.sender,rewardToken);
        setApprovalForAll(contractAddress, true);
        

        return newItemId;
    }
    
}

contract NFTMarket is ReentrancyGuard {
  address payable public beneficiary;
  uint public auctionEndTime;
  address public highestBidder;
  uint public highestBid;
  mapping(address=>uint) public pendingReturns;
  bool ended = false;
  event HighestBidIncrease(address bidder,uint amount);
  event AuctionEnded(address winner, uint amount);

  using Counters for Counters.Counter;
  Counters.Counter private _itemIds;
  Counters.Counter private _itemsSold;

  address payable owner;
  uint256 listingPrice = 1 ether;

  constructor() {
    owner = payable(msg.sender);
  }

  struct MarketItem {
    uint itemId;
    address nftContract;
    uint256 tokenId;
    address payable seller;
    address payable owner;
  }

  mapping(uint256 => MarketItem) private idToMarketItem;

  event MarketItemCreated (
    uint indexed itemId,
    address indexed nftContract,
    uint256 indexed tokenId,
    address seller,
    address owner
  );

  function getMarketItem(uint256 marketItemId) public view returns (MarketItem memory) {
    return idToMarketItem[marketItemId];
  }

  function createMarketItem(
    address nftContract,
    uint256 tokenId,
    uint _biddigTime
  ) public payable nonReentrant {
    beneficiary=payable(msg.sender);
    auctionEndTime=block.timestamp+ _biddigTime; 
    require(msg.value == listingPrice, "Price must be equal to listing price");

    _itemIds.increment();
    uint256 itemId = _itemIds.current();
  
    idToMarketItem[itemId] =  MarketItem(
      itemId,
      nftContract,
      tokenId,
      payable(msg.sender),
      payable(address(0))
    );

    IERC721(nftContract).transferFrom(msg.sender, address(this), tokenId);

    emit MarketItemCreated(
      itemId,
      nftContract,
      tokenId,
      msg.sender,
      address(0)
    );
  }

  function createMarketSale(uint256 itemId) public payable nonReentrant {   
    //uint price = idToMarketItem[itemId].price;
    uint tokenId = idToMarketItem[itemId].tokenId;
    require(tokenId == itemId, "No Id");
    if (block.timestamp>auctionEndTime){
            revert("the acution already has end");
        }
        if(msg.value<=highestBid){
            revert ("there is already a higher or equal bid");

        }
        if (highestBid!=0){
            pendingReturns[highestBidder] += highestBid;
        }
        highestBidder=msg.sender;
        highestBid=msg.value;
        emit HighestBidIncrease(msg.sender,msg.value);

  }
  function withdraw(uint256 itemId,address nftContract)public payable  returns(bool) {
        uint amount= pendingReturns[msg.sender];
        uint tokenId = idToMarketItem[itemId].tokenId;
        require(msg.value == amount && tokenId==itemId, "Please submit the asking price in order to complete the purchase");

        idToMarketItem[itemId].seller.transfer(msg.value);
        IERC721(nftContract).transferFrom(address(this), highestBidder, tokenId);
        idToMarketItem[itemId].owner = payable(msg.sender);
        _itemsSold.increment();
        payable(owner).transfer(amount);
        

        return true;
    }
  function acutionEnd() public{
        if(block.timestamp<auctionEndTime){
        revert("the acuction has not eneded yet");
        }
        if(ended){
            revert("the function auction ended already called");
        }
        ended=true;
        emit AuctionEnded(highestBidder,highestBid);
        beneficiary.transfer(highestBid);

    }
  

  function fetchMarketItems() public view returns (MarketItem[] memory) {
    uint itemCount = _itemIds.current();
    uint unsoldItemCount = _itemIds.current() - _itemsSold.current();
    uint currentIndex = 0;

    MarketItem[] memory items = new MarketItem[](unsoldItemCount);
    for (uint i = 0; i < itemCount; i++) {
      if (idToMarketItem[i + 1].owner == address(0)) {
        uint currentId = i + 1;
        MarketItem storage currentItem = idToMarketItem[currentId];
        items[currentIndex] = currentItem;
        currentIndex += 1;
      }
    }
   
    return items;
  }

  function fetchMyNFTs() public view returns (MarketItem[] memory) {
    uint totalItemCount = _itemIds.current();
    uint itemCount = 0;
    uint currentIndex = 0;

    for (uint i = 0; i < totalItemCount; i++) {
      if (idToMarketItem[i + 1].owner == msg.sender) {
        itemCount += 1;
      }
    }

    MarketItem[] memory items = new MarketItem[](itemCount);
    for (uint i = 0; i < totalItemCount; i++) {
      if (idToMarketItem[i + 1].owner == msg.sender) {
        uint currentId = i + 1;
        MarketItem storage currentItem = idToMarketItem[currentId];
        items[currentIndex] = currentItem;
        currentIndex += 1;
      }
    }
   
    return items;
  }
}

